"""
Script.

Compare the round trip rates for different simulations.

Input data is generated by running      ./get_data.sh rt    in an appropriate directory.

Data is separated by 'simID' and the input file.
This allows you to compare on two levels, e.g. you could have simID corresponding to
different numbers of bins, and separate data generated using discrete weights and interpolated
weights using different input files.

Multiple simulations with the same simID (set in params.py) will be averaged over.
File name(s) are to be given as argument variables.

The module sim_info.py must be set appropriately:
        > file names are used as keys for a dictionary 
        > simID is used to index a list of strings

"""

import numpy as np
import matplotlib.pyplot as plt
from sys import argv, exit

import sim_info

# Generic plot parameters
plt.rc('text', usetex=True)
font = {'family': 'serif',
        'size': 14}
plt.rc('font', **font)
colors = ('b', 'g', 'm', 'c')

# Create plot
fig, ax = plt.subplots()
ax.tick_params(direction='in', top=True, right=True)
ax.set_xlabel(sim_info.axis_label)
ax.set_ylabel("Round trip time (sweeps)")
ax.set_title("Round trip comparisons")
ax.ticklabel_format(style='sci', axis='y', scilimits=(-1,1))

# Sort out ticks and labels on categoric axis
fake_xticks = np.arange(len(sim_info.sim_labels))
ax.set_xticks(fake_xticks)
ax.set_xticklabels(sim_info.sim_labels)

# Input file names given as arguments
input_files = argv[1:]
Nfiles = len(input_files)

# Quick check
if Nfiles == 0:
    print "Error: Please provide one or more input files as arguments"
    exit(1)


# Iterate over input files
for ifile in range(Nfiles):

    print "Reading data from file: ", input_files[ifile]
    
    # Read data from file
    input_data = np.loadtxt(input_files[ifile])
    simID = input_data[:,0]
    rt_rate = input_data[:,1]

    unique_simID = np.sort(np.array(list(set(simID)), dtype=int))
    simID = np.array(simID, dtype=int) # convert to int to enable 'usid == sid' expression
    rt_rate_mean = []
    rt_rate_stderr = []

    # ------------------------------------- #
    #  Iterate over unique values of simID  #
    # ------------------------------------- #
    for usid in unique_simID:
        
        # List of row numbers with this value of simID
        index_list = [i for i, sid in enumerate(simID) if usid == sid]
        index_list = np.array(index_list)
        print "Averaging over %d simulations from simID: %d (%s)" \
                %(len(index_list), usid, sim_info.sim_labels[usid])
        
        # Pull out round trip rates for these rows
        data_to_average = rt_rate[index_list]
        Nrep = len(data_to_average)

        # Append mean, standard error to list corresponding to unique_simID
        rt_rate_mean.append( np.mean(data_to_average) )
        rt_rate_stderr.append( np.std(data_to_average) / np.sqrt(Nrep) )
   

    # End loop over unique values of simID


    # ------------- #
    #  Add to plot  #
    # ------------- #
    # input file is a key to access dictionary, value describes the simulations
    label = sim_info.file_labels[input_files[ifile]]

    # Plot mean round trip time and error
    ax.errorbar(fake_xticks[unique_simID], rt_rate_mean, yerr=rt_rate_stderr, fmt=colors[ifile]+'o', label=label)


# End loop over input files

    
ax.legend()
plt.tight_layout()
plt.show()

